AWSTemplateFormatVersion: "2010-09-09"
Description:
  Create a Linux Nginx Server,
  This templates creates a instance for use with code deploy and code pipeline
  ec2 server is configured with node 16 and git.
Parameters:
#  Will retrieve the latest linux AMI
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  SiteName:
    Type: String
    Default: linux.stackfails.io
    Description: Url of the site
  MyS3BucketName:
    Description: Name of an existing bucket to download template
    Type: String
    Default: ignite-ci-cd-pipeline


Resources:
  Webserver:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Basic Nginx Server Setup
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              ruby: []
              wget: []
              git: []
          files:
            # Configure the reverse proxy for the site domain
            # ideally this will come from the S3 bucket, but it is here to highlight the base config
            /etc/nginx/conf.d/stackfails.conf:
              content: !Sub |
                      server {
                      listen 80;
                      server_name ${SiteName};
                      location / {
                          proxy_pass http://localhost:3000;
                        }
                      }

            "/etc/cfn/cfn-hup.conf":
              content:
                !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                mode: "000400"
                owner: "root"
                group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"

          commands:
            00-create-ssh-key:
              command: !Sub |
                touch ~/.ssh/id_rsa
                echo "{{resolve:ssm:ssh-key}}" >> ~/.ssh/id_rsa
                chmod 700 ~/.ssh/
                chmod 600 ~/.ssh/id_rsa
            #Install code deploy agent so instance can be used by cd pipeline
            01-install-cd:
              command: !Sub |
                wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
                chmod +x ./install
                ./install auto
            02-install-ngnix:
              command: sudo amazon-linux-extras install nginx1 -y
            03-run-nginx:
              command: sudo service nginx start
               # Install node 16
            04-install-node:
              command: !Sub |
                curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
                yum -y install nodejs
            05-clone-app:
              command: |
                mkdir /var/webapp
                cd  /var/webapp
                ssh -o "StrictHostKeyChecking=no" git@github.com
                git clone git@github.com:ajanes780/aaron-blog-nextjs-sanity.git
            06-add-app-env:
              command: !Sub |
                cd /var/webapp/aaron-blog-nextjs-sanity
                touch .env
                echo "{{resolve:ssm:stack-fail-env}}" >> /var/webapp/aaron-blog-nextjs-sanity/.env
            07-install-start-app:
              command: |
                cd /var/webapp/aaron-blog-nextjs-sanity
                npm install 
                npm run build
            08-install-start-process-manager:
              command: !Sub |
                cd /var/webapp/aaron-blog-nextjs-sanity
                npm install -g pm2
                pm2 start npm --name "aaron-blog-nextjs-sanity" -- start
          Services:
            sysvinit:
              codedeploy-agent:
                enabled: true
                ensureRunning: true
              nginx:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/nginx/conf.d/stackfails.conf
              cfn-hup:
                enable: 'true'
                ensureRunning: 'true'
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"

      # Define S3 access credentials
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          buckets:
            - !Sub ${MyS3BucketName}
          roleName: !Ref InstanceRole
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      # Always use the latest Linux AMI
      ImageId: !Ref LatestAmiId
      AvailabilityZone: us-east-1a
      InstanceType: t2.small
      KeyName: wordpress
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref ServerSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
            # Get the latest CloudFormation helper scripts
            yum install -y aws-cfn-bootstrap
          
            # Start cfn-init
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Webserver --region ${AWS::Region}
          
            # cfn-init completed so signal success or not
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Webserver --region ${AWS::Region}
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ''
      Policies:
        - PolicyName: AuthenticatedS3GetObjects
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${MyS3BucketName}/*'
                Effect: Allow
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  SSHSecurityGroup:
    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
  ServerSecurityGroup:
    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow connections from specified CIDR ranges
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 192.168.1.1/32
  EIPAssociation:
    Type: "AWS::EC2::EIPAssociation"
    Properties:
      AllocationId: "eipalloc-09759c409bcf5611c"
      InstanceId: !Ref Webserver


Outputs:
  InstanceId:
    Description: The ID of the instance
    Value: !Ref Webserver
  PublicIP:
    Description: The public IP of the instance
    Value: !GetAtt Webserver.PublicIp
  PublicDNS:
    Description: The public DNS name of the instance
    Value: !GetAtt Webserver.PublicDnsName
  SecurityGroup:
    Description: The security group of the instance
    Value: !Ref ServerSecurityGroup
  SSHSecurityGroup:
    Description: The security group of the instance
    Value: !Ref SSHSecurityGroup
